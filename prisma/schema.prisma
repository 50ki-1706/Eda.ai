generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  accounts      Account[]
  chats         Chat[]
  projects      Project[]
  sessions      Session[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Project {
  id          String          @id @default(uuid())
  instruction String
  name        String
  userId      String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  chats       ChatInProject[]
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("project")
}

model ChatInProject {
  id        String            @id @default(uuid())
  summary   String
  isPinned  Boolean           @default(false)
  projectId String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  branches  BranchInProject[]
  project   Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("chat_in_project")
}

model BranchInProject {
  id             String             @id @default(uuid())
  summary        String
  parentBranchId String?
  chatId         String
  createdAt      DateTime           @default(now())
  chat           ChatInProject      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  parentBranch   BranchInProject?   @relation("BranchToBranch", fields: [parentBranchId], references: [id])
  childBranches  BranchInProject[]  @relation("BranchToBranch")
  messages       MessageInProject[]

  @@map("branch_in_project")
}

model MessageInProject {
  id         String             @id @default(uuid())
  promptText String
  promptFile String?
  parentId   String?
  response   String
  branchId   String
  createdAt  DateTime           @default(now())
  branch     BranchInProject    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  parent     MessageInProject?  @relation("MessageToMessage", fields: [parentId], references: [id])
  children   MessageInProject[] @relation("MessageToMessage")

  @@map("message_in_project")
}

model Chat {
  id        String   @id @default(uuid())
  summary   String
  isPinned  Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  branches  Branch[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat")
}

model Branch {
  id             String    @id @default(uuid())
  summary        String
  parentBranchId String?
  chatId         String
  createdAt      DateTime  @default(now())
  chat           Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  parentBranch   Branch?   @relation("BranchToBranch", fields: [parentBranchId], references: [id])
  childBranches  Branch[]  @relation("BranchToBranch")
  messages       Message[]

  @@map("branch")
}

model Message {
  id         String    @id @default(uuid())
  promptText String
  promptFile String?
  parentId   String?
  response   String
  branchId   String
  createdAt  DateTime  @default(now())
  branch     Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  parent     Message?  @relation("MessageToMessage", fields: [parentId], references: [id])
  children   Message[] @relation("MessageToMessage")

  @@map("message")
}
